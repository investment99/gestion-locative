// Test de connexion Supabase
const { createClient } = require('@supabase/supabase-js');
const config = require('./supabase-config.js');

// Cr√©er le client Supabase
const supabase = createClient(config.url, config.anonKey, config.options);

async function testConnection() {
  console.log('üîÑ Test de connexion √† Supabase...');
  
  try {
    // Test 1: V√©rifier la connexion
    const { data, error } = await supabase
      .from('agencies')
      .select('count')
      .limit(1);
    
    if (error) {
      console.error('‚ùå Erreur de connexion:', error.message);
      return;
    }
    
    console.log('‚úÖ Connexion r√©ussie √† Supabase!');
    
    // Test 2: Cr√©er une agence de test
    console.log('\nüìù Cr√©ation d\'une agence de test...');
    const { data: agency, error: createError } = await supabase
      .from('agencies')
      .insert({
        name: 'Agence Test',
        email: 'test@gestionlocative.com',
        phone: '0123456789',
        subscription_plan: 'free'
      })
      .select()
      .single();
    
    if (createError) {
      console.error('‚ùå Erreur lors de la cr√©ation:', createError.message);
      return;
    }
    
    console.log('‚úÖ Agence cr√©√©e avec succ√®s!');
    console.log('üìä Donn√©es:', agency);
    
    // Test 3: Lire les donn√©es
    console.log('\nüìñ Lecture des agences...');
    const { data: agencies, error: readError } = await supabase
      .from('agencies')
      .select('*');
    
    if (readError) {
      console.error('‚ùå Erreur lors de la lecture:', readError.message);
      return;
    }
    
    console.log(`‚úÖ ${agencies.length} agence(s) trouv√©e(s)`);
    agencies.forEach(a => {
      console.log(`  - ${a.name} (${a.email})`);
    });
    
  } catch (err) {
    console.error('‚ùå Erreur g√©n√©rale:', err);
  }
}

// Lancer le test
testConnection(); 